}
install.packages('memoise')
install.packages("memoise")
library(memoise)
knitr::opts_chunk$set(collapse=TRUE, comment = "#>", fig.width=9, fig.height=6, eval=TRUE, echo=FALSE, results="hide")
if (!exists("mread.table")) mread.table = memoise::memoise(read.table)
tcga_project="TCGA-LUSC"
if (!exists("mreadRDS")) {
mreadRDS = memoise::memoise(readRDS)
}
if (!exists("mget_dmprocr_results")) {
# debugged and optimized version of dmprocr::trscr_meth_analysis https://github.com/bcm-uga/dmprocrgene_symbols
preproc_omics_data = function(gene_symbol, s_cnv, s_meth, s_trscr, gene_indexed_probes) {
meth_probe_idx = intersect(gene_indexed_probes[[gene_symbol]], rownames(s_meth$data))
if (length(meth_probe_idx) <= 1) {
return(NULL)
}
meth_data = s_meth$data[meth_probe_idx, ]
meth_data = meth_data[, apply(is.na(meth_data), 2, sum)/nrow(meth_data) < 0.5]
meth_data = meth_data[apply(is.na(meth_data), 1, sum)/ncol(meth_data) < 0.5, ]
# dim(meth_data)
meth_probe_idx = rownames(meth_data)
if (!is.null(s_cnv)) {
idx_sample = intersect (
intersect(
colnames(s_trscr$data)[order(s_trscr$data[gene_symbol,])],
colnames(meth_data)
),
colnames(s_cnv$data)[abs(s_cnv$data[gene_symbol, ]) < 0.2]
)
} else {
idx_sample = intersect(
colnames(s_trscr$data)[order(s_trscr$data[gene_symbol,])],
colnames(meth_data)
)
}
if (length(idx_sample) <= 1) {
return(NULL)
}
meth_data = meth_data[, idx_sample]
trscr_data = s_trscr$data[gene_symbol, idx_sample]
ret = list(
gene_symbol=gene_symbol,
study_name=s_trscr$stuffs$name,
meth_data=meth_data,
trscr_data=trscr_data
)
return(ret)
}
get_dmprocr_results = function(gene_symbol, tcga_project) {
# warning: gene_indexed_probes is a global variable
s_cnv   = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_cnv.rds"))
s_meth  = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_meth.rds"))
s_trscr = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_trscr.rds"))
preproc_omics_data(gene_symbol, s_cnv, s_meth, s_trscr, gene_indexed_probes)
}
mget_dmprocr_results = memoise::memoise(get_dmprocr_results)
}
s_cnv   = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_cnv.rds"))
if (!exists("mreadRDS")) {
mreadRDS = memoise::memoise(readRDS)
}
if (!exists("mget_dmprocr_results")) {
# debugged and optimized version of dmprocr::trscr_meth_analysis https://github.com/bcm-uga/dmprocrgene_symbols
preproc_omics_data = function(gene_symbol, s_cnv, s_meth, s_trscr, gene_indexed_probes) {
meth_probe_idx = intersect(gene_indexed_probes[[gene_symbol]], rownames(s_meth$data))
if (length(meth_probe_idx) <= 1) {
return(NULL)
}
meth_data = s_meth$data[meth_probe_idx, ]
meth_data = meth_data[, apply(is.na(meth_data), 2, sum)/nrow(meth_data) < 0.5]
meth_data = meth_data[apply(is.na(meth_data), 1, sum)/ncol(meth_data) < 0.5, ]
# dim(meth_data)
meth_probe_idx = rownames(meth_data)
if (!is.null(s_cnv)) {
idx_sample = intersect (
intersect(
colnames(s_trscr$data)[order(s_trscr$data[gene_symbol,])],
colnames(meth_data)
),
colnames(s_cnv$data)[abs(s_cnv$data[gene_symbol, ]) < 0.2]
)
} else {
idx_sample = intersect(
colnames(s_trscr$data)[order(s_trscr$data[gene_symbol,])],
colnames(meth_data)
)
}
if (length(idx_sample) <= 1) {
return(NULL)
}
meth_data = meth_data[, idx_sample]
trscr_data = s_trscr$data[gene_symbol, idx_sample]
ret = list(
gene_symbol=gene_symbol,
study_name=s_trscr$stuffs$name,
meth_data=meth_data,
trscr_data=trscr_data
)
return(ret)
}
get_dmprocr_results = function(gene_symbol, tcga_project) {
# warning: gene_indexed_probes is a global variable
s_cnv   = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_cnv.rds"))
s_meth  = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_meth.rds"))
s_trscr = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_trscr.rds"))
preproc_omics_data(gene_symbol, s_cnv, s_meth, s_trscr, gene_indexed_probes)
}
mget_dmprocr_results = memoise::memoise(get_dmprocr_results)
}
s_cnv   = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_cnv.rds"))
if (!exists("mreadRDS")) {
mreadRDS = memoise::memoise(readRDS)
}
if (!exists("mget_dmprocr_results")) {
# debugged and optimized version of dmprocr::trscr_meth_analysis https://github.com/bcm-uga/dmprocrgene_symbols
preproc_omics_data = function(gene_symbol, s_cnv, s_meth, s_trscr, gene_indexed_probes) {
meth_probe_idx = intersect(gene_indexed_probes[[gene_symbol]], rownames(s_meth$data))
if (length(meth_probe_idx) <= 1) {
return(NULL)
}
meth_data = s_meth$data[meth_probe_idx, ]
meth_data = meth_data[, apply(is.na(meth_data), 2, sum)/nrow(meth_data) < 0.5]
meth_data = meth_data[apply(is.na(meth_data), 1, sum)/ncol(meth_data) < 0.5, ]
# dim(meth_data)
meth_probe_idx = rownames(meth_data)
if (!is.null(s_cnv)) {
idx_sample = intersect (
intersect(
colnames(s_trscr$data)[order(s_trscr$data[gene_symbol,])],
colnames(meth_data)
),
colnames(s_cnv$data)[abs(s_cnv$data[gene_symbol, ]) < 0.2]
)
} else {
idx_sample = intersect(
colnames(s_trscr$data)[order(s_trscr$data[gene_symbol,])],
colnames(meth_data)
)
}
if (length(idx_sample) <= 1) {
return(NULL)
}
meth_data = meth_data[, idx_sample]
trscr_data = s_trscr$data[gene_symbol, idx_sample]
ret = list(
gene_symbol=gene_symbol,
study_name=s_trscr$stuffs$name,
meth_data=meth_data,
trscr_data=trscr_data
)
return(ret)
}
get_dmprocr_results = function(gene_symbol, tcga_project) {
# warning: gene_indexed_probes is a global variable
s_cnv   = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_cnv.rds"))
s_meth  = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_meth.rds"))
s_trscr = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_trscr.rds"))
preproc_omics_data(gene_symbol, s_cnv, s_meth, s_trscr, gene_indexed_probes)
}
mget_dmprocr_results = memoise::memoise(get_dmprocr_results)
}
Database_webmaster <- read.csv("http://tecfa.unige.ch/guides/R/data/edutechwiki-fr-gw-oct-6-2014.csv", header = TRUE, sep= ",")
View(Database_webmaster)
if (!exists("mreadRDS")) {
mreadRDS = memoise::memoise(readRDS)
}
if (!exists("mget_dmprocr_results")) {
# debugged and optimized version of dmprocr::trscr_meth_analysis https://github.com/bcm-uga/dmprocrgene_symbols
preproc_omics_data = function(gene_symbol, s_cnv, s_meth, s_trscr, gene_indexed_probes) {
meth_probe_idx = intersect(gene_indexed_probes[[gene_symbol]], rownames(s_meth$data))
if (length(meth_probe_idx) <= 1) {
return(NULL)
}
meth_data = s_meth$data[meth_probe_idx, ]
meth_data = meth_data[, apply(is.na(meth_data), 2, sum)/nrow(meth_data) < 0.5]
meth_data = meth_data[apply(is.na(meth_data), 1, sum)/ncol(meth_data) < 0.5, ]
# dim(meth_data)
meth_probe_idx = rownames(meth_data)
if (!is.null(s_cnv)) {
idx_sample = intersect (
intersect(
colnames(s_trscr$data)[order(s_trscr$data[gene_symbol,])],
colnames(meth_data)
),
colnames(s_cnv$data)[abs(s_cnv$data[gene_symbol, ]) < 0.2]
)
} else {
idx_sample = intersect(
colnames(s_trscr$data)[order(s_trscr$data[gene_symbol,])],
colnames(meth_data)
)
}
if (length(idx_sample) <= 1) {
return(NULL)
}
meth_data = meth_data[, idx_sample]
trscr_data = s_trscr$data[gene_symbol, idx_sample]
ret = list(
gene_symbol=gene_symbol,
study_name=s_trscr$stuffs$name,
meth_data=meth_data,
trscr_data=trscr_data
)
return(ret)
}
get_dmprocr_results = function(gene_symbol, tcga_project) {
# warning: gene_indexed_probes is a global variable
s_cnv   = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_cnv.rds"))
s_meth  = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_meth.rds"))
s_trscr = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_trscr.rds"))
preproc_omics_data(gene_symbol, s_cnv, s_meth, s_trscr, gene_indexed_probes)
}
mget_dmprocr_results = memoise::memoise(get_dmprocr_results)
}
s_cnv   = mreadRDS(paste0("tcga_studies/study_", tcga_project, "https://portal.gdc.cancer.gov/projects/TCGA-LUSC/_cnv.rds"))
s_cnv   = mreadRDS(paste0("tcga_studies/study_", tcga_project, "https://portal.gdc.cancer.gov/projects/TCGA-LUSC/_cnv.rds"))
data.projet <- read.csv(file="/home/ndoye/M1_SSD/Analyse_données/TP_M1MIASHS_AD/mini_projet/data/etudiants.csv")
data.projet <- read.csv(file="/home/ndoye/M1_SSD/Analyse_données/TP_M1MIASHS_AD/mini_projet/data/etudiants.csv")
data.projet <- read.csv(file="/home/ndoye/M1_SSD/Analyse_données/TP_M1MIASHS_AD/mini_projet/data/etudiants.csv",sep=";")
View(data.projet)
summary(data.projet)
s_cnv   = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_cnv.rds"))
paste0("mmmmm",data.projet)
/home/ndoye/M1_SSD/Projet tutore/data
s_cnv   = mreadRDS(paste0("tcga_studies/study_", tcga_project, "/home/ndoye/M1_SSD/Projet tutore/data/study_TCGA-BRCA_cnv.rds"))
/home/ndoye/M1_SSD/Projet tutore/data
readRDS("/home/ndoye/M1_SSD/Projet tutore/data/study_TCGA-BRCA_cnv.rds")
install.packages("epimedtools")
knitr::opts_chunk$set(collapse=TRUE, comment = "#>", fig.width=9, fig.height=6, eval=TRUE, echo=FALSE, results="hide")
if (!exists("mread.table")) mread.table = memoise::memoise(read.table)
tcga_project="TCGA-LUSC"
if (!exists("mreadRDS")) {
mreadRDS = memoise::memoise(readRDS)
}
if (!exists("mget_dmprocr_results")) {
# debugged and optimized version of dmprocr::trscr_meth_analysis https://github.com/bcm-uga/dmprocrgene_symbols
preproc_omics_data = function(gene_symbol, s_cnv, s_meth, s_trscr, gene_indexed_probes) {
meth_probe_idx = intersect(gene_indexed_probes[[gene_symbol]], rownames(s_meth$data))
if (length(meth_probe_idx) <= 1) {
return(NULL)
}
meth_data = s_meth$data[meth_probe_idx, ]
meth_data = meth_data[, apply(is.na(meth_data), 2, sum)/nrow(meth_data) < 0.5]
meth_data = meth_data[apply(is.na(meth_data), 1, sum)/ncol(meth_data) < 0.5, ]
# dim(meth_data)
meth_probe_idx = rownames(meth_data)
if (!is.null(s_cnv)) {
idx_sample = intersect (
intersect(
colnames(s_trscr$data)[order(s_trscr$data[gene_symbol,])],
colnames(meth_data)
),
colnames(s_cnv$data)[abs(s_cnv$data[gene_symbol, ]) < 0.2]
)
} else {
idx_sample = intersect(
colnames(s_trscr$data)[order(s_trscr$data[gene_symbol,])],
colnames(meth_data)
)
}
if (length(idx_sample) <= 1) {
return(NULL)
}
meth_data = meth_data[, idx_sample]
trscr_data = s_trscr$data[gene_symbol, idx_sample]
ret = list(
gene_symbol=gene_symbol,
study_name=s_trscr$stuffs$name,
meth_data=meth_data,
trscr_data=trscr_data
)
return(ret)
}
get_dmprocr_results = function(gene_symbol, tcga_project) {
# warning: gene_indexed_probes is a global variable
s_cnv   = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_cnv.rds"))
s_meth  = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_meth.rds"))
s_trscr = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_trscr.rds"))
preproc_omics_data(gene_symbol, s_cnv, s_meth, s_trscr, gene_indexed_probes)
}
mget_dmprocr_results = memoise::memoise(get_dmprocr_results)
}
s_cnv   = mreadRDS(paste0("tcga_studies/study_", tcga_project, "/home/ndoye/M1_SSD/Projet tutore/data/study_TCGA-BRCA_cnv.rds"))
s_cnv   = mreadRDS("/home/ndoye/M1_SSD/Projet tutore/data/study_TCGA-BRCA_cnv.rds")
install.packages("epimedtools")
BiocManager::install(c("Biobase", "affy", "GEOquery"))
install.packages("BiocManager")
BiocManager::install(c("Biobase", "affy", "GEOquery"))
devtools :: install_github ( " fchuffar / epimedtools " )
devtools :: install_github ("https://github.com/fchuffar/epimedtools")
s_meth  = mreadRDS(paste0("tcga_studies/study_", tcga_project, "_meth.rds"))
s_cnv   = mreadRDS("/home/ndoye/M1_SSD/Projet tutore/data/study_TCGA-BRCA_cnv.rds")
s_cnv
summary(s_cnv)
s_cnv   = mreadRDS(paste0("tcga_studies/study_", tcga_project, "/home/ndoye/M1_SSD/Projet tutore/data/study_TCGA-BRCA_cnv.rds"))
s_cnv   = mreadRDS(paste0("tcga_studies/study_","/home/ndoye/M1_SSD/Projet tutore/data/study_TCGA-BRCA_cnv.rds"))
x <- c(725, 722, 727, 718, 723, 731, 719, 724, 726, 726)
s_cnv   = mreadRDS(paste0("/home/ndoye/M1_SSD/Projet tutore/data/study_TCGA-BRCA_cnv.rds"))
shiny::runApp('M1_SSD/Projet_R/Shiny_projet_R')
knitr::opts_chunk$set(echo = TRUE)
data(cars)
# regression lineaire
reg <- lm(dist~speed,cars)
summary(reg)
plot(cars)
abline(h=reg)
plot(cars)
abline(h=reg)
# regression lineaire
reg <- lm(dist~speed,cars)
summary(reg)
plot(cars)
abline(reg)
data(cars)
# regression lineaire
reg <- lm(dist~speed,cars)
summary(reg)
plot(cars)
abline(reg)
data(cars)
# regression lineaire
reg <- lm(dist~speed,cars)
summary(reg)
plot(cars)
abline(reg,col="red")
data(cars)
# regression lineaire
reg <- lm(dist~speed,cars)
summary(reg)
plot(cars)
abline(reg,col="red")
abline(reg$coefficients,col="yellow")
data(cars)
# regression lineaire
reg <- lm(dist~speed,cars)
summary(reg)
plot(cars)
#abline(reg,col="red")
abline(reg$coefficients,col="yellow")
data(cars)
# regression lineaire
reg <- lm(dist~speed,cars)
summary(reg)
plot(cars)
abline(reg,col="red")
#abline(reg$coefficients,col="yellow")
predict.lm(reg,20)
predict(reg,20)
predict(reg,new=20)
predict(reg,data.frame(p=20))
predict(reg,data.frame(20))
predict.lm(reg,data.frame(20))
predict(reg,data.frame(20))
data(cars)
# regression lineaire
reg <- lm(dist~speed,cars)
summary(reg)
plot(cars)
abline(reg,col="red")
reg
predict(reg,data.frame(20))
predict(reg,data.frame(20))
predict(reg)
data(cars)
# regression lineaire
reg <- lm(dist~speed,cars)
summary(reg)
plot(cars)
abline(reg,col="red")
#abline(reg$coefficients,col="yellow")
predict(reg,20)
predict(reg,data.frame(20))
predict(reg,newdata = data.frame(20)
q
predict(reg,newdata = data.frame(20))
predict(reg,newdata = data.frame(c(20)))
predict(reg)
predict(reg,newdata = data.frame(c(20)))
predict(reg,newdata = data.frame(speed=20))
confint(lm,"speed")
lm
reg
confint(reg,"speed")
MASS::cpus
x <- c(3,6,9,12,15,18,21,24)
y <- c(20,50,40,70,40,60,50,80)
reg1 <- lm(x~y)
reg2 <- lm(y~x)
plot(x,y)
abline(h = reg1)
x <- c(3,6,9,12,15,18,21,24)
y <- c(20,50,40,70,40,60,50,80)
reg1 <- lm(x~y)
reg2 <- lm(y~x)
plot(x,y)
abline(h = reg1)
x <- c(3,6,9,12,15,18,21,24)
y <- c(20,50,40,70,40,60,50,80)
reg1 <- lm(x~y)
reg2 <- lm(y~x)
plot(x,y)
abline(reg1)
x <- c(3,6,9,12,15,18,21,24)
y <- c(20,50,40,70,40,60,50,80)
reg1 <- lm(x~y)
reg2 <- lm(y~x)
plot(x,y)
abline(reg2)
reg2 <- lm(x~y)
plot(y,x)
abline(reg2)
corrplot::corr(x,y)
cor(x,y)
cor(x,y)
fisher.test(x,y)
regm <- lm(y~x1+x2)
y <- c(85,70,100,140,115,105)
x1 <- c(3,5,9,12,14,17)
x2 <- c(11,14,15,16,19,23)
regm <- lm(y~x1+x2)
regm
summary(regm)
regm$coefficients
plot(regm)
knitr::opts_chunk$set(echo = TRUE)
y <- c(85,70,100,140,115,105)
x1 <- c(3,5,9,12,14,17)
x2 <- c(11,14,15,16,19,23)
regm <- lm(y~x1+x2)
plot(x1+x2,y)
y <- c(85,70,100,140,115,105)
x1 <- c(3,5,9,12,14,17)
x2 <- c(11,14,15,16,19,23)
regm <- lm(y~x1+x2)
plot(x1+x2,y)
abline(regm)
y <- c(85,70,100,140,115,105)
x1 <- c(3,5,9,12,14,17)
x2 <- c(11,14,15,16,19,23)
regm <- lm(y~x1+x2)
plot(x1+x2,y)
curve(regm,add = TRUE)
y <- c(85,70,100,140,115,105)
x1 <- c(3,5,9,12,14,17)
x2 <- c(11,14,15,16,19,23)
x <- lm(y~x1+x2)
plot(x1+x2,y)
curve(x,add = TRUE)
y <- c(85,70,100,140,115,105)
x1 <- c(3,5,9,12,14,17)
x2 <- c(11,14,15,16,19,23)
regm <- lm(y~x1+x2)
regm
regm
y <- c(85,70,100,140,115,105)
x1 <- c(3,5,9,12,14,17)
x2 <- c(11,14,15,16,19,23)
regm <- lm(y~x1+x2)
anova(regm)
library(tidyverse)
library(readxl)
setwd("~/M1_SSD/ADD/cours/TP_2/data")
# load data
data <- read_excel("Donnees-TP2-M1-MIASHS.xls")
# load data
data <- read_excel("data/Donnees-TP2-M1-MIASHS.xls")
View(data)
names(data)
# load data
data <- read_excel("data/Donnees-TP2-M1-MIASHS.xls")
summary(data)
View(data)
View(cars)
View(data)
tabc <- prop.table(data)
tabc <- as.table(data)
tabc <- as.table(data)
View(data)
is.data.frame(data)
View(data)
View(data)
tabc <- prop.table(data$Sexe,data$Age)
tabc <- table(data$Sexe,data$Age)
tabc
tabc <- table(Age~Sexe,data)
tabc <- xtabs(Age~Sexe,data)
tabc
tabc <- xtabs(Sexe,data)
tabc <- xtabs(Age~Sexe,data)
tabc
tabc <- table(data$Sexe,data$EtatCivil)
tabc
tabc <- table(data$Sexe,data$EtatCivil)
prop.table(tabc)
tabc <- table(data$Sexe,data$EtatCivil)
tabc
datavqualit <- filter(Sexe,EtatCivil,Diplome,AvisReforme,data)
datavqualit <- filter(data,Sexe,EtatCivil,Diplome,AvisReforme)
datavqualit <- subset(data,Sexe,EtatCivil,Diplome,AvisReforme)
datavqualit <- data.frame(dat$Sexe,data$EtatCivil,data$Diplome,data$AvisReforme)
datavqualit <- data.frame(data$Sexe,data$EtatCivil,data$Diplome,data$AvisReforme)
datavqualit
datavqualit <- data.frame(data$Sexe,data$EtatCivil,data$Diplome,data$AvisReforme)
tabceff <- as.table(datavqualit)
datavqualit <- data.frame(data$Sexe,data$EtatCivil,data$Diplome,data$AvisReforme)
tabceff <- table(datavqualit)
tabceff <- table(datavqualit)
tabceff
tabceff <- table(data$Sexe,data$EtatCivil,data$Diplome,data$AvisReforme)
tabceff
barplot(tabceff)
