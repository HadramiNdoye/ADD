plot(regm)
knitr::opts_chunk$set(echo = TRUE)
balloonplot(tabc1)
library(gplots)
balloonplot(tabc1)
tabc1 <- table(data$Sexe,data$Diplome)
library(tidyverse)
library(readxl)
library(gplots)
# load data
data <- read_excel("data/Donnees-TP2-M1-MIASHS.xls")
summary(data)
tabc1 <- table(data$Sexe,data$Diplome)
tabc2 <- round(prop.table(tabc1),2)
tabc3 <- tabc2*100
balloonplot(tabc1)
balloonplot(tabc1)
ggplot(data=data.frame(tabc1),mapping = aes(x = data$Sexe,y = data$Diplome,fill=data$Sexe))
tabc1
balloonplot(tabc1)
ggplot(data=data.frame(tabc1),mapping = aes(x = data$Sexe,y = data$Diplome,fill=data$Diplome))
balloonplot(tabc1)
ggplot(data=data.frame(tabc1)) + geom_bar(mapping = aes(x = data$Sexe,y = data$Diplome,fill=data$Sexe))
data_frame(tabc1)
data.frame(tabc1)
balloonplot(tabc1)
ggplot(data=data.frame(tabc1)) + geom_bar(mapping = aes(x = data$Sexe,y = Freq))
balloonplot(tabc1)
ggplot(data=data.frame(tabc1)) + geom_bar(mapping = aes(x = Var1,y = Freq))
balloonplot(tabc1)
ggplot(data=data.frame(tabc1)) + geom_bar(stat="bins",mapping = aes(x = Var1,y = Freq))
knitr::opts_chunk$set(echo = TRUE)
plot(X[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),main="Premier plan factoriel")
knitr::opts_chunk$set(echo = TRUE)
library("FactoMineR")
library("factoextra")
library("corrplot")
library("ca")
datasmoke <- ca::smoke
datasmoke
f <- as.matrix(datasmoke) / sum(datasmoke)
# distribution marginale ligne et colonne
r <- apply(f,1,sum)
c <- apply(f,2,sum)
# matrice Z
Z <- (f-r%*%t(c))/r%*%t(c)
gsvd <- function(Z,r,c){
#Z matrice numerique de dimension (n,p) et de rang k
#r poids de la metrique des lignes N=diag(r)
# c poids de la metrique des colonnes M=diag(c)
#-----sortie---------------
# d vecteur de taille k contenant les valeurs singulieres (racines carres des valeurs propres)
# U matrice de dimension (n,k) des vecteurs propres de de ZMZ'N
# V matrice de dimension (p,k) des vecteurs propres de de Z'NZM
k <-qr(Z)$rank
colnames<-colnames(Z)
rownames<-rownames(Z)
Z <-as.matrix(Z)
Ztilde <-diag(sqrt(r)) %*% Z %*%diag(sqrt(c))
e <-svd(Ztilde)
U <-diag(1/sqrt(r))%*%e$u[,1:k]# Attention : ne s'ecrit comme cela que parceque N et M sont diagonales!
V <-diag(1/sqrt(c))%*%e$v[,1:k]
d <- e$d[1:k]
rownames(U) <- rownames
rownames(V) <- colnames
if(length(d)>1)
colnames(U) <-colnames(V) <-paste("dim", 1:k, sep = "")
return(list(U=U,V=V,d=d))
}
U <- gsvd(Z,r,c)$U
V <- gsvd(Z,r,c)$V
d <- gsvd(Z,r,c)$d
# Utilsation de la commande sweep pour calculer les cordonnés X et Y
X <- sweep(U,2,d,'*')
Y <- sweep(V,2,d,'*')
plot(X[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),main="Premier plan factoriel")
abline(v = 0, lty = 2)
abline(h = 0, lty = 2)
text(X[,1:2],rownames(datasmoke),pos=4)
datasmoke
plot(X[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),col="red",main="Premier plan factoriel")
abline(v = 0, lty = 2)
abline(h = 0, lty = 2)
text(X[,1:2],rownames(datasmoke),pos=4)
plot(Y[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),col="blue",main="Premier plan factoriel")
abline(v = 0, lty = 2)
abline(h = 0, lty = 2)
text(X[,1:2],rownames(datasmoke),pos=4)
plot(Y[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),col="blue",main="Premier plan factoriel")
abline(v = 0, lty = 2)
abline(h = 0, lty = 2)
text(Y[,1:2],rownames(datasmoke),pos=4)
Y
X
Y[1:2,]
Y[,1:4]
X[,1:2]
Y[,1:2]
plot(Y[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),col="red",main="Premier plan factoriel")
abline(v = 0, lty = 2)
abline(h = 0, lty = 2)
text(Y[,1:2],colnames(datasmoke),pos=4)
plot(Y[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),col="blue",main="Premier plan factoriel")
abline(v = 0, lty = 2)
abline(h = 0, lty = 2)
text(Y[,1:2],colnames(datasmoke),pos=4)
X
d
dh <- data(housetasks)
dh
housetasks
res.ca <- CA (housetasks, graph = FALSE)
res.ca$eig
Z
plot(X[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),col="red",main="Premier plan factoriel")
abline(v = 0, lty = 2)
abline(h = 0, lty = 2)
text(X[,1:2],rownames(datasmoke),pos=4)
points(Y[,1:2],pch=2,col=2)
text(Y[,1:2],colnames(datasmoke),pos=4,col=2)
plot(X[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),main="Premier plan factoriel")
abline(v = 0, lty = 2)
abline(h = 0, lty = 2)
text(X[,1:2],rownames(datasmoke),pos=4)
points(Y[,1:2],pch=2,col=2)
text(Y[,1:2],colnames(datasmoke),pos=4,col=2)
knitr::opts_chunk$set(echo = TRUE)
IT <-sum(d^2) #Inertie totale
d[1:2]^2/IT*100 #pourcentage d'inertie des axes
sum(d[1:2]^2/IT)*100#pourcentage d'inertie du plan
afc <- CA(datasmoke,scale.unit = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library("FactoMineR")
library("factoextra")
library("corrplot")
library("ca")
datasmoke <- ca::smoke
datasmoke
f <- as.matrix(datasmoke) / sum(datasmoke)
# distribution marginale ligne et colonne
r <- apply(f,1,sum)
c <- apply(f,2,sum)
# matrice Z
Z <- (f-r%*%t(c))/r%*%t(c)
gsvd <- function(Z,r,c){
#Z matrice numerique de dimension (n,p) et de rang k
#r poids de la metrique des lignes N=diag(r)
# c poids de la metrique des colonnes M=diag(c)
#-----sortie---------------
# d vecteur de taille k contenant les valeurs singulieres (racines carres des valeurs propres)
# U matrice de dimension (n,k) des vecteurs propres de de ZMZ'N
# V matrice de dimension (p,k) des vecteurs propres de de Z'NZM
k <-qr(Z)$rank
colnames<-colnames(Z)
rownames<-rownames(Z)
Z <-as.matrix(Z)
Ztilde <-diag(sqrt(r)) %*% Z %*%diag(sqrt(c))
e <-svd(Ztilde)
U <-diag(1/sqrt(r))%*%e$u[,1:k]# Attention : ne s'ecrit comme cela que parceque N et M sont diagonales!
V <-diag(1/sqrt(c))%*%e$v[,1:k]
d <- e$d[1:k]
rownames(U) <- rownames
rownames(V) <- colnames
if(length(d)>1)
colnames(U) <-colnames(V) <-paste("dim", 1:k, sep = "")
return(list(U=U,V=V,d=d))
}
U <- gsvd(Z,r,c)$U
V <- gsvd(Z,r,c)$V
d <- gsvd(Z,r,c)$d
# Utilsation de la commande sweep pour calculer les cordonnés X et Y
X <- sweep(U,2,d,'*')
Y <- sweep(V,2,d,'*')
plot(X[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),main="Premier plan factoriel")
abline(v = 0, lty = 2)
abline(h = 0, lty = 2)
text(X[,1:2],rownames(datasmoke),pos=4)
points(Y[,1:2],pch=2,col=2)
text(Y[,1:2],colnames(datasmoke),pos=4,col=2)
plot(Y[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),col="blue",main="Premier plan factoriel")
abline(v = 0, lty = 2)
abline(h = 0, lty = 2)
text(Y[,1:2],colnames(datasmoke),pos=4)
plot(X[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),main="Premier plan factoriel")
abline(v = 0, lty = 2)
abline(h = 0, lty = 2)
text(X[,1:2],rownames(datasmoke),pos=4)
points(Y[,1:2],pch=2,col=2)
text(Y[,1:2],colnames(datasmoke),pos=4,col=2)
IT <-sum(d^2) #Inertie totale
d[1:2]^2/IT*100 #pourcentage d'inertie des axes
sum(d[1:2]^2/IT)*100#pourcentage d'inertie du plan
afc <- CA(datasmoke,scale.unit = TRUE)
afc <- CA(datasmoke)
afc <- CA(datasmoke,graph = FALSE)
afc
afc$eig
d
afc <- CA(datasmoke,graph = FALSE)
row <- get_ca_row(afc)
afc <- CA(datasmoke,graph = FALSE)
row <- get_ca_row(afc)
col <- get_ca_col(afc)
row
row$coord
X
col$coord
Y
fviz_ca_biplot(afc, repel = TRUE)
plot(X[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),main="Premier plan factoriel")
abline(v = 0, lty = 2)
abline(h = 0, lty = 2)
text(X[,1:2],rownames(datasmoke),pos=4)
points(Y[,1:2],pch=2,col=2)
text(Y[,1:2],colnames(datasmoke),pos=4,col=2)
plot(X[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),col="blue",main="Premier plan factoriel")
abline(v = 0, lty = 2)
abline(h = 0, lty = 2)
text(X[,1:2],rownames(datasmoke),pos=4)
points(Y[,1:2],pch=2,col=2)
text(Y[,1:2],colnames(datasmoke),pos=4,col=2)
plot(X[,1:2],xlab="dim 1",ylab="dim 2",xlim=c(-0.4,0.4),ylim=c(-0.4,0.4),col="blue",main="Premier plan factoriel")
abline(v = 0, lty = 2)
abline(h = 0, lty = 2)
text(X[,1:2],rownames(datasmoke),col="blue",pos=4)
points(Y[,1:2],pch=2,col=2)
text(Y[,1:2],colnames(datasmoke),pos=4,col=2)
plot(afc)
row
row$coord
afc <- CA(datasmoke,graph = FALSE)
afc$eig
row <- get_ca_row(afc)
row$coord # matrice X
col <- get_ca_col(afc)
col$coord # matrice Y
# representation de profil ligne(X) et profil colonne sur le plan
plot(afc)
knitr::opts_chunk$set(echo = TRUE)
# load data
data_ski <- read.table("data/stations.txt",header = TRUE)
# extraction des variables quantitatives
data_ski_active <- data_ski[1:32,2:7]
summary(data_ski_active)
data_ski
as.matrix(data_ski)
class(as.matrix(data_ski))
# load data
data_ski <- read.table("data/stations.txt",header = TRUE)
# extraction des variables quantitatives
data_ski_active <- as.matrix(data_ski[1:32,2:7])
summary(data_ski_active)
data_ski_active
data_ski
data_ski_active
data_ski$Nom
data_ski
# load data
data_ski <- read.table("data/stations.txt",header = TRUE)
# extraction des variables quantitatives
data_ski_active <- data_ski[1:32,2:7]
summary(data_ski_active)
data_ski
data_ski_active
# load data
data_ski <- read.table("data/stations.txt",header = TRUE)
# extraction des variables quantitatives
data_ski_active <- as.matrix(data_ski[1:32,2:7],colnames=c(data_ski$Nom))
summary(data_ski_active)
data_ski_active
# load data
data_ski <- read.table("data/stations.txt",header = TRUE)
# extraction des variables quantitatives
data_ski_active <- as.matrix(data_ski[1:32,2:7],colnames=c(data_ski$Nom))
summary(data_ski_active)
is.matrix(data_ski_active)
data_ski_active
Z1 <- c(1:3,4,9)
Z2 <- c(5,10,rep(8,2),12)
n <- length(Z2)
mat <- matrix(c(Z1,Z2),nrow=2,ncol=5,byrow = TRUE,dimnames = list(c("Z1","Z2")))
meanZ1 <- mean(mat[1,])
meanZ2 <- mean(mat[2,])
miZ1 <- sd(mat[1,])
miZ2 <- sd(mat[2,])
Z1norm <- (Z1 - mean(Z1)) / sd(Z1)
Z2norm <- (Z2 - mean(Z2)) / sd(Z2)
matnorm <- matrix(c(Z1norm,Z2norm),nrow=2,ncol=5,byrow = TRUE,dimnames = list(c("Z1","Z2")))
# Matrice de correlation
matcorr <- (1/4) * (matnorm %*% t(matnorm))
# valeurs propres et vecteurs propres
eig <- eigen(matcorr)
valp1 <- eig$values[1]
vp1 <- eig$vectors[,1]
valp2 <- eig$values[2]
vp2 <- eig$vectors[,2]
# Cercle de correlation contenat les vecteurs X1 et X2
X1 <-  sqrt(valp1) * vp1
X2 <- sqrt(valp2) * vp2
mat
# load data
data_ski <- read.table("data/stations.txt",header = TRUE)
# extraction des variables quantitatives
data_ski_active <- as.matrix(data_ski[1:32,2:7],dimnames = c(data_ski$Nom))
summary(data_ski_active)
data_ski_active
data_ski$Nom
class(data_ski$Nom)
data_ski_active
class(data_ski_active)
# load data
data_ski <- read.table("data/stations.txt",header = TRUE)
# extraction des variables quantitatives
data_ski_active <- as.matrix(data_ski[1:32,2:7])
summary(data_ski_active)
class(data_ski_active)
data_ski_active
# load data
data_ski <- read.table("data/stations.txt",header = TRUE)
# extraction des variables quantitatives
data_ski_active <- as.matrix(data_ski[1:32,2:7])
colnames(data_ski_active) <- data_ski$Nom
# load data
data_ski <- read.table("data/stations.txt",header = TRUE)
# extraction des variables quantitatives
data_ski_active <- as.matrix(data_ski[1:32,2:7])
colnames(data_ski_active) <- c(data_ski$Nom)
# load data
data_ski <- read.table("data/stations.txt",header = TRUE)
# extraction des variables quantitatives
data_ski_active <- as.matrix(data_ski[1:32,2:7])
data_ski_active
summary(data_ski_active)
# load data
data_ski <- read.table("data/stations.txt",header = TRUE)
# extraction des variables quantitatives
data_ski_active <- as.matrix(data_ski[1:32,2:7])
rownames(data_ski_active) <- data_ski$Nom
data_ski_active
summary(data_ski_active)
# load data
data_ski <- read.table("data/stations.txt",header = TRUE)
# extraction des variables quantitatives
data_ski_active <- as.matrix(data_ski[1:32,2:7])
rownames(data_ski_active) <- data_ski$Nom
summary(data_ski_active)
data_ski_active
pcaski <- PCA(data_ski_active,scale.unit = T,graph = FALSE)
# Visualisation des valeurs propres
valp <- pcaski$eig
fviz_eig(pcaski, addlabels = TRUE, ylim = c(0, 50))
var <- get_pca_var(pcaski)
var$coord
fviz_pca_var(pcaski,axes = c(1,2))
corrplot(var$cos2,is.corr = FALSE)
fviz_cos2(pcaski, choice = "var", axes = 1 :2)
fviz_pca_var(pcaski, col.var = "cos2",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE)
var$contrib
corrplot(var$contrib,is.corr = FALSE)
fviz_contrib(pcaski, choice = "var", axes = 1 :2, top = 6)
fviz_pca_var(pcaski, col.var = "contrib",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),alha.var="contrib" )
ind <- get_pca_ind(pcaski)
fviz_pca_ind (pcaski, col.ind = "cos2",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE)
fviz_contrib(pcaski, choice = "ind", axes = 1 :2)
fviz_pca_biplot(pcaski,
repel = TRUE,
col.var = "#2E9FDF", # Couleur des variables
col.ind = "#696969") # Couleur des individues )
setwd("~/M1_SSD/ADD/cours/TP_4/data")
dataw <- read.csv("data/writers.csv")
View(dataw)
dataw <- read.csv("data/writers.csv")
head(dataw,4)
summary(dataw)
dim(dataw)
dataextr <- dataw[1:15,1:15]
View(dataextr)
dataextr <- dataw[1:15,1:15]
chisq.test(dataextr)
View(dataextr)
as.table(as.matrix(dataextr))
dataextr <- dataw[1:15,1:15]
chisq.test(as.table(as.matrix(dataextr)))
dataextr <- dataw[1:15,1:15]
chisq.test(dataextr)
dataextr
dataextr <- dataw[1:15,1:15]
chisq.test(dataextr,header=TRUE)
dataextr <- dataw[1:15,1:15]
chisq.test(dataextr,header = TRUE,row.names = 1)
dataw <- read.csv("data/writers.csv",header = TRUE,row.names = 1)
head(dataw,4)
summary(dataw)
dataw
dataextr <- dataw[1:15,1:15]
chisq.test(dataextr)
2.2 / exp(16)
2.475774/exp(7)
Titanic
caw <- CA(dataextr,graph = FALSE)
caw
caw$eig
caw <- CA(dataextr,graph = FALSE)
caw$eig
plot(caw)
biplot(caw)
plot(caw,axes = c(3:4))
plot(caw,axes = c(1:4))
1
plot(caw)
caw <- CA(dataextr,graph = FALSE)
caw$eig
plot(ca)
caw <- CA(dataextr,graph = FALSE)
caw$eig
plot(caw)
caw2 <- CA(dataw,sup=c(15,16),graph = FALSE)
caw2 <- CA(dataextr,sup=c(15,16),graph = FALSE)
caw2 <- CA(dataw,row.sup=c(15,16),graph = FALSE)
caw2 <- CA(dataw,row.sup=c(15,16),graph = FALSE)
caw2$eig
caw2 <- CA(dataw,row.sup=c(15,16),graph = FALSE)
caw2$eig
plot(caw2)
caw2 <- CA(dataw,row.sup=c(15,16),graph = FALSE)
caw2$eig
plot(caw2,col.row.sup=3)
View(dataextr)
View(dataw)
#matrice des coordonnees factorielles sur 4 dimensionsX
mcf <- rbind(res$row$coord[,1:4],res$row.sup$coord[,1:4])
#matrice des coordonnees factorielles sur 4 dimensionsX
mcf <- rbind(caw2$row$coord[,1:4],caw2$row.sup$coord[,1:4])
#matrice de distance euclidiennes entre les 17 echantillons
d <-dist(mcf)
#CAH
tree <-hclust(d,method="ward.D2")
plot(tree,hang=-1)
#partition en 4 classes
cutree(tree,k=4)
setwd("~/M1_SSD/ADD/cours/TP_5/data")
pdata <- load("data/poissons.rdata)
pdata <- load("data/poissons.rdata")
pdata
pdata <- load("data/poissons.rdata")
getwd()
help(load)
getwd()
pdata <- load("poissons.rdata")
pdata <- load("poissons.rdata")
pdata
data
pdata
load("poissons.rdata")
View(data)
data <- load("poissons.rdata")
data
load("poissons.rdata")
View(data)
View(data)
poison <- data("poison")
poison
data(poison)
datap <- data(poison)
datap
FactoMineR::poison
data(poison)
head(data(poison),4)
data(poison)
head(poison,4)
data(poison)
head(poison,4)
poison.active <- poison[1 :55, 5 :15]
head(poison.active[, 1 :6], 3)
res.mca <- MCA (poison.active, graph = FALSE)
summary(poison.active)
poison
View(poison)
setwd("~/M1_SSD/ADD/cours/TP_5/data")
knitr::opts_chunk$set(echo = TRUE)
load("data/chiens.xlsx")
read.csv("data/chiens.xlsx")
read.csv("data/chiens.xlsx")
read.csv("data/chiens.xlsx")
load("data/chiens.rda")
load("data/chiens.rda")
load("chiens.rda")
getwd()
load("~/M1_SSD/ADD/cours/TP_5/data/chiens.rda")
load("~/M1_SSD/ADD/cours/TP_5/data/poissons.rdata")
load("~/M1_SSD/ADD/cours/TP_5/data/chiens.rda")
library("FactoMineR")
library("factoextra")
library("corrplot")
library("ca")
library("readxl")
library("readxl")
read_xlsx("chiens.xlsx")
read_xlsx("data/chiens.xlsx")
read_xlsx("data/chiens.xlsx")
chiendata <- read_xlsx("data/chiens.xlsx")
chiendata
View(chiendata)
chiendata <- read_xlsx("data/chiens.xlsx")
head(chiendata)
View(chiendata)
chiendata <- read_xlsx("data/chiens.xlsx",header=TRUE)
chiendata <- read_xlsx("data/chiens.xlsx",header = TRUE)
chiendata <- read_xlsx("data/chiens.xlsx")
head(chiendata)
View(chiendata)
data(chiens)
